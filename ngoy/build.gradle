buildscript {
	repositories {
	    jcenter()

	     dependencies {
	        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.2'
	    }
	}
}

plugins {
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.6.3'
}

jacoco {
  toolVersion = "0.8.2"
}

apply plugin: 'java-library'
apply plugin: 'com.github.johnrengelman.shadow'
sourceCompatibility = 1.8

version = '1.0.0-rc5'

project.ext.buildTimestamp = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
def implementationVersion = "${version} (${project.ext.buildTimestamp})"

repositories {
    jcenter()
}

dependencies {
	implementation 'org.codehaus.janino:janino:3.0.11'
	implementation 'commons-cli:commons-cli:1.4'
	implementation 'org.jodd:jodd-lagarto:5.0.6'

    // JUnit test framework
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.assertj:assertj-core:3.11.1'
    testImplementation 'org.mockito:mockito-core:2.23.0'
}

test {
    testLogging {
        events "skipped", "failed"
        exceptionFormat "full"
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

tasks.withType(Test) {
	systemProperty "file.encoding", "UTF-8"
}

javadoc {
  exclude '**/internal/**'
}
javadoc.options.addStringOption('Xdoclint:none', '-quiet')

sourceSets {
  test {
    resources {
      srcDir 'src/test/java'
    }
  }
}

jar {
	from fileTree(dir: 'more-jar-content', include: '**')
    manifest {
        attributes(
        	"Main-Class": "ngoy.Ngoy",
        	"Implementation-Version": implementationVersion)
    }
}

shadowJar {
	from fileTree(dir: 'more-jar-content', include: '**')
	
	relocate 'jodd', 'ngoy.core.dom.jodd'
	relocate 'org', 'ngoy.internal.lib.org'
	
	minimize()
}

task buildAll(type: Zip, dependsOn: ['build', 'shadowJar']) {
   from 'build/libs/' include "ngoy-$version-all.jar"
   from '.' include 'ngoy'
   from '.' include 'ngoy.cmd'
   archiveName "ngoy-$version-all.zip"
   into "ngoy-$version"
   destinationDir(file('build/libs'))
}
